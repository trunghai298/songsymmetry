/* eslint-disable @next/next/no-img-element */
"use client";

import React, { use, useEffect, useState } from "react";
import { useAppDispatch, useAppSelector } from "../../lib/redux/hooks";
import { useRouter } from "next/navigation";
import sdk from "../../lib/spotify-sdk/ClientInstance";
import Container from "../components/core/Container";
import { debounce, map, omit, set } from "lodash";
import { AudioFeatures, Playlist, Track } from "@spotify/web-api-ts-sdk";
import { setTrack } from "../../lib/redux/slices/playerSlices";
import Tooltip from "../components/Tooltip";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
} from "@/components/ui/dialog";
import { DialogClose } from "@radix-ui/react-dialog";
import { Loader } from "../components/core/Loader";
import TracksGrid from "../components/TracksGrid";
import { setOpenSubscribeDialog } from "@/lib/redux/slices/subscribeSlices";

type SongRecommendation = {
  source: Track;
  recommendation: {
    tracks: Track[];
    seeds: {
      id: string;
      href: string;
      type: string;
      initialPoolSize: number;
      afterFilteringSize: number;
      afterRelinkingSize: number;
    }[];
  };
};

function SongSymmetry() {
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [searchResult, setSearchResult] = useState<Track[]>();
  const [songRecommendation, setSongRecommendation] =
    useState<SongRecommendation>();
  const [playlist, setPlaylist] = useState<{
    state: "idle" | "loading" | "success" | "error";
    playlist?: Playlist;
  }>({ state: "idle" });
  const [recommendationState, setRecommendationState] = useState({
    fetching: false,
    fetchNext: false,
    nextTrackId: "",
  });
  const [audioFeatures, setAudioFeatures] = useState<AudioFeatures>();

  const playlistTop = useAppSelector((state) => state.playlist.playlist);
  const topTracksRecomend = map(
    playlistTop?.[0].tracks,
    (track) => track.track
  );

  const dispatch = useAppDispatch();
  const router = useRouter();

  const onQueryChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    debountSearch(e.target.value);
  };

  const onSearchTrack = async (q: string) => {
    if (q.length > 2) {
      const results = await sdk.search(q, ["track"], undefined, 5);
      setSearchResult(results.tracks.items);
    } else {
      setSearchResult(undefined);
    }
  };

  const recommendationAlgorithm = async (trackFeatures: AudioFeatures) => {
    const audioVibes = {
      acousticness: trackFeatures.acousticness,
      danceability: trackFeatures.danceability,
      energy: trackFeatures.energy,
      instrumentalness: trackFeatures.instrumentalness,
      liveness: trackFeatures.liveness,
      speechiness: trackFeatures.speechiness,
      valence: trackFeatures.valence,
    };

    const sortVibes = Object.entries(audioVibes)
      .sort((a, b) => a[1] - b[1])
      .reverse();

    const rcmArguments = {
      [`min_${sortVibes[0][0]}`]: sortVibes[0][1] - 0.1,
      [`max_${sortVibes[0][0]}`]: sortVibes[0][1] + 0.1,
      [`min_${sortVibes[1][0]}`]: sortVibes[1][1] - 0.1,
      [`max_${sortVibes[1][0]}`]: sortVibes[1][1] + 0.1,
    };
    return rcmArguments;
  };

  const onGetRecommendation = async (
    track: Track,
    audioFeaturesInput?: AudioFeatures
  ) => {
    setRecommendationState((state) => ({ ...state, fetching: true }));
    const audioFeatures = audioFeaturesInput
      ? audioFeaturesInput
      : await sdk.tracks.audioFeatures(track.id);
    const rcmArguments = await recommendationAlgorithm(audioFeatures);
    const results = await sdk.recommendations.get({
      seed_tracks: [track.id],
      ...rcmArguments,
      limit: 20,
    });
    setRecommendationState({
      fetching: false,
      fetchNext: false,
      nextTrackId: "",
    });
    setSongRecommendation({ source: track, recommendation: results });
  };

  const onSavePlaylist = async () => {
    try {
      setPlaylist({ state: "loading" });
      const user = await sdk.currentUser.profile();
      if (!songRecommendation || !user) return;
      const payload = {
        name: `Song Likes: ${songRecommendation?.source.name} - ${songRecommendation?.source.artists[0].name} [Generated by Song Symmetry]`,
        description: `Songs have similar vibe to the ${songRecommendation?.source.name}. Enjoy :)`,
        public: true,
      };
      const playlist = await sdk.playlists.createPlaylist(user.id, payload);
      if (playlist) {
        const uris = songRecommendation.recommendation.tracks.map(
          (track) => track.uri
        );
        await sdk.playlists.addItemsToPlaylist(playlist.id, uris);
      }
      setPlaylist({ state: "success", playlist });
    } catch (error) {
      setPlaylist({ state: "error" });
      console.log(error);
    }
  };

  useEffect(() => {
    (async () => {
      if (!recommendationState.nextTrackId) return;
      try {
        const [track, audioFeatures] = await Promise.all([
          sdk.tracks.get(recommendationState.nextTrackId),
          sdk.tracks.audioFeatures(recommendationState.nextTrackId),
        ]);
        setAudioFeatures(
          omit(audioFeatures, [
            "id",
            "uri",
            "track_href",
            "type",
            "analysis_url",
            "duration_ms",
            "mode",
            "time_signature",
            "key",
          ]) as any
        );
        onGetRecommendation(track, audioFeatures);
      } catch (error: any) {}
    })();
  }, [recommendationState.nextTrackId]);

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const trackId = params.get("trackId");
    if (trackId) {
      setRecommendationState({
        fetching: true,
        fetchNext: false,
        nextTrackId: trackId,
      });
    }
  }, []);

  const debountSearch = debounce(onSearchTrack, 1000);

  const renderRecommendations = () => {
    if (recommendationState.fetching) return <Loader />;
    if (!songRecommendation) return null;
    return (
      <div className="w-full flex flex-col space-y-10 justify-center items-center">
        <div className="w-full flex flex-row justify-start items-center">
          <i
            className="bi bi-arrow-left text-white text-left text-2xl cursor-pointer"
            onClick={() => {
              setSongRecommendation(undefined);
              router.replace("/song-symmetry");
            }}
          />
        </div>
        <div className="w-full flex flex-col space-y-8 justify-center items-center">
          <div className="w-full flex flex-col space-y-3 sm:flex-row sm:space-x-4 justify-start sm:items-end">
            <div className="h-full flex flex-row space-x-2 sm:space-x-4 md:space-x-8 lg:space-x-12 grow items-end">
              <div className="relative">
                <img
                  width={400}
                  height={400}
                  src={songRecommendation.source.album.images[0].url}
                  alt=""
                  className="w-[100px] h-[100px] sm:w-[130px] sm:h-[130px] md:w-[200px] md:h-[200px] lg:w-[250px] lg:h-[250px] object-contain rounded-md"
                />
                <div
                  className={`h-full w-full absolute top-0 left-0 flex justify-center items-center opacity-0 hover:opacity-100 cursor-pointer`}
                  onClick={() => dispatch(setTrack(songRecommendation.source))}
                >
                  <i className="bi bi-play-circle-fill text-gray-300 text-4xl"></i>
                </div>
              </div>
              <div className="flex flex-col space-y-1">
                <h3 className="text-xl font-bold text-spotify-green-dark flex">
                  Songs Similar to
                </h3>
                <div className="flex flex-tow items-start justify-start space-x-2">
                  <h1 className="text-2xl sm:text-3xl md:text-3xl lg:text-4xl font-bold sm:font-extrabold text-white">
                    {songRecommendation.source.name}
                  </h1>
                  {songRecommendation.source.explicit && (
                    <i className="bi bi-explicit-fill" />
                  )}
                </div>
                <div className="flex flex-row space-x-1">
                  by &nbsp;
                  {songRecommendation.source.artists.map((artist, i) => (
                    <h2
                      key={artist.id}
                      className="text-md font-bold text-white overflow-hidden text-ellipsis hover:underline cursor-pointer"
                      onClick={() => router.push(`/artist/${artist.id}`)}
                    >
                      {artist.name}
                      {i < songRecommendation.source.artists.length - 1 && ", "}
                    </h2>
                  ))}
                </div>
              </div>
            </div>
            <div className="w-50 sm:w-100 md:w-100 lg:w-100 flex flex-row justify-end">
              <Button
                className="flex items-center flex-row justify-between space-x-2  bg-spotify-green-dark hover:bg-spotify-green-light disabled:bg-spotify-green-dark py-2 px-4 rounded-3xl"
                onClick={onSavePlaylist}
                disabled={playlist.state === "loading"}
              >
                <i className="bi bi-spotify text-white text-2xl" />
                <h3 className="text-white text-sm font-bold uppercase">
                  {playlist.state === "loading" ? "Saving..." : "Save Playlist"}
                </h3>
              </Button>
            </div>
          </div>
        </div>
        <div className="w-full flex flex-col space-y-6 justify-center items-center">
          <div className="w-full rounded-sm flex flex-col space-y-4">
            {songRecommendation?.recommendation.tracks.map((track) => (
              <div className="w-full flex flex-col" key={track.id}>
                <div
                  className="w-full flex flex-row space-x-4 justify-start items-center rounded-md cursor-pointer"
                  onClick={() => dispatch(setTrack(track))}
                >
                  <img
                    width={100}
                    height={100}
                    className="w-[40px] h-[40px] object-contain rounded-lg"
                    src={track.album.images[0].url}
                    alt=""
                  />
                  <div className="flex flex-col grow space-y-1">
                    <div className="w-full flex flex-row space-x-1 overflow-hidden text-ellipsis">
                      <h2 className="text-md sm:text-lg font-bold text-white">
                        {track.name}
                      </h2>
                      {track.explicit && (
                        <i className="bi bi-explicit-fill text-sm" />
                      )}
                    </div>
                    <div className="flex flex-row space-x-1">
                      {track.artists.map((artist, i) => (
                        <h2
                          key={artist.id}
                          className="text-md font-normal text-white overflow-hidden text-ellipsis hover:underline cursor-pointer"
                          onClick={() => router.push(`/artist/${artist.id}`)}
                        >
                          {artist.name}
                          {i < track.artists.length - 1 && ", "}
                        </h2>
                      ))}
                    </div>
                  </div>
                  <Tooltip text="Get Similar Songs">
                    <i
                      className="bi bi-search text-white text-xl"
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        router.replace(`/song-symmetry?trackId=${track.id}`);
                        setRecommendationState({
                          fetching: false,
                          fetchNext: true,
                          nextTrackId: track.id,
                        });
                      }}
                    />
                  </Tooltip>
                  <i className="bi bi-play-circle-fill text-white text-2xl" />
                </div>
              </div>
            ))}
          </div>
          <div className="w-full flex flex-row space-x-4 justify-center items-center">
            <Button
              onClick={() => dispatch(setOpenSubscribeDialog())}
              variant="outline"
              className="w-full sm:w-[400px] p-6 sm:p-8 text-xl sm:text-2xl font-bold text-spotify-green hover:text-spotify-green-light"
            >
              Want More Songs Like This?
            </Button>
          </div>
        </div>
      </div>
    );
  };

  const onClickRecommendTrack = (track: Track) => {
    setRecommendationState({
      fetching: false,
      fetchNext: true,
      nextTrackId: track.id,
    });
  };

  const renderSearchResult = () => {
    if (recommendationState.fetching) return <Loader />;
    return (
      <>
        <div className="flex flex-col items-center justify-center w-full h-full">
          <div className="w-full flex flex-col space-y-2 justify-center items-center">
            <h1 className="text-4xl font-bold text-white flex">
              Song Symmetry
            </h1>
            <h2 className="text-lg font-light text-gray-300 flex">
              Find Songs in the Same Vibes
            </h2>
          </div>
        </div>
        <div
          className={`w-full flex flex-col ${
            searchResult ? `space-y-2` : `space-y-10`
          } justify-center items-center`}
        >
          <input
            className="flex w-80 sm:w-[600px] h-14 text-white rounded-md border border-white border-input bg-background px-3 py-2 text-sm sm:text-md md:text-lg select-none ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
            placeholder="Type a song name"
            type="text"
            value={searchQuery}
            onChange={onQueryChange}
          />
          {searchResult ? (
            <div className="w-80 sm:w-[600px] rounded-sm flex flex-col p-4 space-y-4 bg-white">
              {searchResult.map((track) => (
                <div className="w-full flex flex-col" key={track.id}>
                  <div
                    className="w-full flex flex-row space-x-4 justify-start items-center px-2 py-1 rounded-md hover:bg-gray-400 cursor-pointer"
                    onClick={() => onGetRecommendation(track)}
                  >
                    <img
                      width={100}
                      height={100}
                      className="w-[40px] h-[40px] object-contain rounded-md"
                      src={track.album.images[0].url}
                      alt=""
                    />
                    <div className="flex flex-col grow space-y-1">
                      <h2 className="text-lg font-bold text-gray-900">
                        {track.name}
                      </h2>
                      <h2 className="text-md font-normal text-gray-500 overflow-hidden text-ellipsis">
                        {track.artists[0].name}
                      </h2>
                    </div>
                    <i className="bi bi-chevron-right text-white text-2xl" />
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="w-full flex flex-col space-y-4">
              <h3 className="text-md font-medium text-white">
                Or Find Similar Song to Your Top Tracks
              </h3>
              <TracksGrid
                tracks={topTracksRecomend as Track[]}
                onClickTrack={onClickRecommendTrack}
              />
            </div>
          )}
        </div>
      </>
    );
  };

  const renderPlaylistDialog = () => {
    return (
      <Dialog open={playlist.state === "success"}>
        <DialogClose onClick={() => setPlaylist({ state: "idle" })}>
          <DialogContent className="rounded-3xl border-none p-8 bg-gray-900 flex flex-col justify-center text-center items-center">
            <DialogHeader className="text-center">
              <span className="text-6xl">&#127881;</span>
              <h1 className="text-2xl w-full sm:text-3xl md:text-4xl font-bold text-white">
                Saved to your account
              </h1>
              <h2 className="text-md sm:text-lg font-light text-gray-300 w-100 sm:w-90">
                The playlist is now available in your Spotify library. Also you
                can find it anytime in Song Symmetry.
              </h2>{" "}
            </DialogHeader>
            <DialogFooter>
              <Button
                onClick={() => {
                  router.push(
                    `/tracks?type=playlist&id=${playlist.playlist?.id}`
                  );
                }}
                className="w-auto min-w-[150px] font-bold"
                variant="secondary"
              >
                Open Playlist
              </Button>
              <Button
                className="w-auto min-w-[150px] px-1 sm:px-3 py-1 sm:py-2 font-extrabold"
                onClick={() => setPlaylist({ state: "idle" })}
              >
                <i className="bi bi-spotify text-white text-md sm:text-2lg mr-2"></i>
                Open Spotify
              </Button>
            </DialogFooter>
          </DialogContent>
        </DialogClose>
      </Dialog>
    );
  };

  return (
    <Container>
      {renderPlaylistDialog()}
      <div className="flex flex-col space-y-6 items-center justify-center w-full h-full">
        {songRecommendation ? renderRecommendations() : renderSearchResult()}
      </div>
    </Container>
  );
}

export default SongSymmetry;
